#!/usr/bin/env node

'use strict';

const config = require('../config');
const app = require('../app');
const http = require('http');


// Get port from environment and store in Express.
app.set('port', config.port);

// Create HTTP server.
const server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(config.port);
server.on('error', (error) => {
	if (error.syscall !== 'listen') { throw error; }

	let bind = typeof config.port === 'string' ?
		'Pipe ' + config.port :
		'Port ' + config.port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
});
server.on('listening', () => {
	let addr = server.address();
	let bind = typeof addr === 'string' ?
		'pipe ' + addr :
		'port ' + addr.port;

	console.log('Listening on ' + bind);
});

// Delete temporary folder on closing
if (app.get('env') === 'development') {
	// Prevent the program from closing instantly
	process.stdin.resume();

	const fse = require('fs-extra');
	const path = require('path');

	process.on('SIGINT', () => {
		let basePath = path.join(__dirname, '../public');
		fse.readdirSync(basePath).forEach((p) => {
			if (p[0] === '~') {
				fse.removeSync(path.join(basePath, p));
			}
		});
		process.exit();
	});
}